<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | New Learnings from Old Understandings]]></title>
  <link href="http://wllmtrng.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://wllmtrng.github.io/"/>
  <updated>2014-07-13T22:51:14-07:00</updated>
  <id>http://wllmtrng.github.io/</id>
  <author>
    <name><![CDATA[William Truong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Theming Octopress with Octostrap]]></title>
    <link href="http://wllmtrng.github.io/blog/2014/05/06/theming-octopress-with-octostrap/"/>
    <updated>2014-05-06T07:01:12-07:00</updated>
    <id>http://wllmtrng.github.io/blog/2014/05/06/theming-octopress-with-octostrap</id>
    <content type="html"><![CDATA[<p>After going back and forth in between themes for Octopress
and having each theme define different behavior for things
like the navbar, I recommend moving to the OctoStrap 3.1.
Octostrap 3.1 is basically a theming agent that allows
you to select themes on top of OctoStrap using Twitter
Bootstrap 3.1.</p>

<p><strong>Note:</strong> If you already have some themes installed, I
recommend installing OctoStrap 3.1 on top of a clean
octopress install in case if there are unremoved artifacts
from your previous theme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Linklog Post]]></title>
    <link href="http://wllmtrng.github.io/blog/2014/04/17/creating-a-linklog-post/"/>
    <updated>2014-04-17T06:46:36-07:00</updated>
    <id>http://wllmtrng.github.io/blog/2014/04/17/creating-a-linklog-post</id>
    <content type="html"><![CDATA[<p>One of the things I do on this blog is reference
outside material with the &rArr; symbol in the title
of a post, which is also called a linklog. This was
popularized by John Gruber&#39;s <a href="http://daringfireball.net">daringfireball</a> blog,
where &#9733; references an external link.</p>

<p>If you were curious prior to this post and tried to
follow <a href="http://octopress.org/docs/blogging/linklog/">Octopress&#39;s Linklog Tutorial</a>, only to
miserably find out it doesn&#39;t work and then end up
berating yourself because you are sure you did
something wrong but don&#39;t know what, apologize to
yourself right now since that tutorial does not apply
to the master branch octopress as of today, April 17,
2014. (A prime example of the Wild Wild West of Github.)</p>

<h2 id="toc_0">Configuring for Linklog Support</h2>

<h3 id="toc_1">Add linklog support to the article html template</h3>

<ul>
<li>Open the file <code>.../source/_includes/article.html</code></li>
<li>Under  <code>&lt;header&gt;</code> tag, replace the first if else block with:
<code>html

&lt;header&gt;
{% if index %}
{% if post.external-url %}&lt;!-- This defines how Octopress will use posts with external-url. --&gt;
  &lt;h1 class=&quot;entry-title external&quot;&gt;&lt;a href=&quot;{{ post.external-url }}&quot;&gt;{% if site.titlecase %}{{ post.title | titlecase }} &lt;span&gt;&amp;rArr;&lt;/span&gt;{% else %}{{ post.title }}{% endif %}&lt;/a&gt;&lt;/h1&gt;
  {% else %}&lt;!-- Now we&#39;re back to normal posts. Note the links used under href in both headers.--&gt;
  &lt;h1 class=&quot;entry-title&quot;&gt;&lt;a href=&quot;{{ root_url }}{{ post.url }}&quot;&gt;{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}&lt;/a&gt;&lt;/h1&gt;
{% endif %}
{% else %}
{% if page.external-url %}
  &lt;h1 class=&quot;entry-title external&quot;&gt;&lt;a href=&quot;{{ page.external-url }}&quot;&gt;{% if site.titlecase %}{{ page.title | titlecase }} &lt;span&gt;&amp;rArr;&lt;/span&gt;{% else %}{{ page.title }}{% endif %}&lt;/a&gt;&lt;/h1&gt;
{% else %}
  &lt;h1 class=&quot;entry-title&quot;&gt;{% if site.titlecase %}{{ page.title | titlecase }}{% else %}{{ page.title }}{% endif %}&lt;/h1&gt;
{% endif %}
{% endif %}

</code>
If you don&#39;t want to use my &rArr; symbol, search for
<code>&amp;rArr;</code> and replace it with your own.</li>
</ul>

<p>Your blog now has linklog support. To create a linklog
post, simply add a line defining the external-url in the
YAML block of your post like this:</p>

<h2 id="toc_2">```yaml</h2>

<p>layout: post
title: &quot;Setting Up Octopress&quot;
date: 2014-03-31 06:47:11 -0700
comments: true
categories: [octopress, tutorial]</p>

<h2 id="toc_3">external-url: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></h2>
<div class="highlight"><pre><code class="text">
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Basics Recap]]></title>
    <link href="http://wllmtrng.github.io/blog/2014/04/08/octopress-basics-recap/"/>
    <updated>2014-04-08T06:43:14-07:00</updated>
    <id>http://wllmtrng.github.io/blog/2014/04/08/octopress-basics-recap</id>
    <content type="html"><![CDATA[<p>```bash Octopress Cheatsheet</p>

<h1 id="toc_0">create a new post</h1>

<p>rake new_post[&#39;Title of the post&#39;]</p>

<h1 id="toc_1">create a new page</h1>

<p>rake new_page[&#39;Title of the page&#39;]</p>

<h1 id="toc_2">preview your work</h1>

<p>rake preview</p>

<h1 id="toc_3">publish it</h1>

<p>rake generate &amp;&amp; rake deploy</p>

<h1 id="toc_4">commit and backup(automatic message)</h1>

<p>git commit -am &quot;<code>date</code>&quot; &amp;&amp; git push origin source
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Markdown Syntax]]></title>
    <link href="http://wllmtrng.github.io/blog/2014/04/02/markdown-syntax/"/>
    <updated>2014-04-02T07:12:14-07:00</updated>
    <id>http://wllmtrng.github.io/blog/2014/04/02/markdown-syntax</id>
    <content type="html"><![CDATA[<p>The file ending in <code>.markdown</code> generated by <code>rake new_post[&quot;New Post&quot;]</code> accepts a plain text formatting syntax called Markdown. To learn the Markdown syntax click on the link in the title to go to Github&#39;s simple tutorial about Markdown. Keep in mind that the rdiscount Markdown processor that Jekyll (which is the static site generator that Octopress uses) supports Github Flavored Markdown too! There also might need to have a bit of work done to get tables displayed properly by editing the css properties of your theme.</p>

<hr>

<p>Then, to see the html file that Octopress generates, perform the command:
<code>bash
$ rake generate
</code>
Proceed to the <code>.../public/blog</code> directory, and then to the date of the post, and then to title of the post. The <code>index.html</code> file there is the generated file from the Markdown post you wrote.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Octopress]]></title>
    <link href="http://wllmtrng.github.io/blog/2014/03/31/setting-up-octopress/"/>
    <updated>2014-03-31T06:47:11-07:00</updated>
    <id>http://wllmtrng.github.io/blog/2014/03/31/setting-up-octopress</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> I&#39;m also a novice at Octopress as well. As I
learn new things I will post new tips and links to
useful guides. Stay tuned!</p>

<p>Just like the link referenced in the title of this post suggests, <strong>Octopress is a blogging framework for hackers.</strong> I am expecting you as a reader to be someone who is familiar with Git, the terminal (or Windows equivalent).</p>

<p>As a pointer, any post I have with the &rArr; symbol in the title will be a link to the suggested guide I recommend to follow through. Go ahead and click on the link above to start the process of setting up with Octopress!</p>

<p>Be sure to follow the links under the &quot;Next Steps&quot; section to <a href="http://octopress.org/docs/deploying">set up deployment</a>, <a href="http://octopress.org/docs/configuring">configure your blog</a>, and <a href="http://octopress.org/docs/blogging">start blogging</a>. Below are some tips for each of the section.</p>

<h2 id="toc_0"><a href="http://octopress.org/docs/deploying">Setting Up Deployment</a>&rArr;</h2>

<p>As you can see, I am using github pages to host my
blog. I would imagine the other two choices would be
just as easy to set up if you are already using that
workflow.</p>

<h2 id="toc_1"><a href="http://octopress.org/docs/configuring">Configuring Octopress</a>&rArr;</h2>

<p>Now we&#39;re approaching the territory of information
overload here if you aren&#39;t knowledgeable in Jekyll or
YAML front matter. To narrow mind your focus, all you
need to pay attention to here is:</p>

<blockquote>
<p>In the _config.yml there are three sections for
configuring your Octopress Blog. Spoiler: You must
change <code>url</code>, and you&#39;ll probably change <code>title</code>,
<code>subtitle</code> and <code>author</code>...</p>
</blockquote>

<p>If you&#39;re like me and want to know how the heck this
stuff works, refer to Jonathon Cutrell&#39;s tuts+ Octopress guide <a href="http://webdesign.tutsplus.com/tutorials/getting-started-with-octopress--webdesign-11442">here</a>.</p>

<h2 id="toc_2"><a href="http://octopress.org/docs/blogging">Start Blogging!</a>&rArr;</h2>

<p>Here you will learn how to create a new post. Executing the command, <code>rake new_post[&quot;Hello World&quot;]</code>, will
create a post with ending with <code>.markdown</code> under the
<code>.../_posts/</code> directory. Open the file and you&#39;ll get
something like this:</p>
<div class="highlight"><pre><code class="text">---
layout: post
title: &quot;Hello World&quot;
date: 2014-03-30 5:59
comments: true
external-url:
categories:
---
</code></pre></div>
<p>This is a block of YAML front matter telling the blog
generator jekyll how to process the post. To write
content for this post just start writing underneath the
YAML front matter in markdown format.</p>
]]></content>
  </entry>
  
</feed>
